{"ast":null,"code":"import React,{useState}from'react';import{CardElement,useStripe,useElements}from'@stripe/react-stripe-js';import{useNavigate}from'react-router-dom';import{useCart}from'../../context/CartContext';import apiClient from'../../api/client';import'./Cart.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PaymentForm=_ref=>{let{clientSecret,orderId,onSuccess,onError}=_ref;const stripe=useStripe();const elements=useElements();const{clearCart}=useCart();const navigate=useNavigate();const[loading,setLoading]=useState(false);const[error,setError]=useState('');const handleSubmit=async event=>{event.preventDefault();setLoading(true);setError('');if(!stripe||!elements){setError('Stripe has not loaded yet. Please wait.');setLoading(false);return;}const{error:stripeError,paymentIntent}=await stripe.confirmCardPayment(clientSecret,{payment_method:{card:elements.getElement(CardElement)}});if(stripeError){setError(stripeError.message);setLoading(false);return;}if(paymentIntent.status==='succeeded'){try{// Update order status to paid\nawait apiClient.patch(\"/api/orders/\".concat(orderId),{status:'paid','paymentDetails.stripePaymentIntentId':paymentIntent.id,'paymentDetails.paidAt':new Date().toISOString()});clearCart();onSuccess(paymentIntent);navigate('/orders');}catch(err){setError('Payment succeeded but failed to update order. Please contact support.');setLoading(false);}}else{setError('Payment failed. Please try again.');setLoading(false);}};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"payment-form\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"card-element-container\",children:/*#__PURE__*/_jsx(CardElement,{options:{style:{base:{fontSize:'16px',color:'#424770','::placeholder':{color:'#aab7c4'}},invalid:{color:'#9e2146'}}}})}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"payment-error\",children:error}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!stripe||loading,className:\"payment-button\",children:loading?'Processing...':'Pay Now'})]});};export default PaymentForm;","map":{"version":3,"names":["React","useState","CardElement","useStripe","useElements","useNavigate","useCart","apiClient","jsx","_jsx","jsxs","_jsxs","PaymentForm","_ref","clientSecret","orderId","onSuccess","onError","stripe","elements","clearCart","navigate","loading","setLoading","error","setError","handleSubmit","event","preventDefault","stripeError","paymentIntent","confirmCardPayment","payment_method","card","getElement","message","status","patch","concat","id","Date","toISOString","err","onSubmit","className","children","options","style","base","fontSize","color","invalid","type","disabled"],"sources":["C:/Users/chapl/bupue/bupue-frontend/src/components/cart/PaymentForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useCart } from '../../context/CartContext';\r\nimport apiClient from '../../api/client';\r\nimport './Cart.css';\r\n\r\nconst PaymentForm = ({ clientSecret, orderId, onSuccess, onError }) => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const { clearCart } = useCart();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    if (!stripe || !elements) {\r\n      setError('Stripe has not loaded yet. Please wait.');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const { error: stripeError, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n      }\r\n    });\r\n\r\n    if (stripeError) {\r\n      setError(stripeError.message);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (paymentIntent.status === 'succeeded') {\r\n      try {\r\n        // Update order status to paid\r\n        await apiClient.patch(`/api/orders/${orderId}`, {\r\n          status: 'paid',\r\n          'paymentDetails.stripePaymentIntentId': paymentIntent.id,\r\n          'paymentDetails.paidAt': new Date().toISOString()\r\n        });\r\n\r\n        clearCart();\r\n        onSuccess(paymentIntent);\r\n        navigate('/orders');\r\n      } catch (err) {\r\n        setError('Payment succeeded but failed to update order. Please contact support.');\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError('Payment failed. Please try again.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"payment-form\">\r\n      <div className=\"card-element-container\">\r\n        <CardElement\r\n          options={{\r\n            style: {\r\n              base: {\r\n                fontSize: '16px',\r\n                color: '#424770',\r\n                '::placeholder': {\r\n                  color: '#aab7c4',\r\n                },\r\n              },\r\n              invalid: {\r\n                color: '#9e2146',\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n      \r\n      {error && <div className=\"payment-error\">{error}</div>}\r\n      \r\n      <button \r\n        type=\"submit\" \r\n        disabled={!stripe || loading} \r\n        className=\"payment-button\"\r\n      >\r\n        {loading ? 'Processing...' : 'Pay Now'}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PaymentForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}